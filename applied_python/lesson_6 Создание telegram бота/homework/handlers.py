import os

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile

from api import get_food_data, get_city_temperature
from middleware import LoggingMessageMiddleware
from states import UserProfile
from utils import calculate_water_norm, calculate_calorie_norm, get_user_data, users, generate_progress_chart

user_router = Router()
user_router.message.middleware(LoggingMessageMiddleware())

WORKOUTS = {
    "—Ö–æ–¥—å–±–∞": 4,
    "–±–µ–≥": 10,
    "–ø–ª–∞–≤–∞–Ω–∏–µ": 9,
    "–≤–µ–ª–æ—Å–∏–ø–µ–¥": 8,
    "–π–æ–≥–∞": 3
}


@user_router.message(Command('set_profile'))
async def set_profile_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    get_user_data(user_id)
    await state.set_state(UserProfile.weight)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –°–∫–æ–ª—å–∫–æ –≤—ã –≤–µ—Å–∏—Ç–µ (–≤ –∫–≥)?',
                         reply_markup=ReplyKeyboardRemove())


@user_router.message(UserProfile.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        user_id = message.from_user.id
        users[user_id]['weight'] = weight
        await state.set_state(UserProfile.height)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')


@user_router.message(UserProfile.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        user_id = message.from_user.id
        users[user_id]['height'] = height
        await state.set_state(UserProfile.age)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')


@user_router.message(UserProfile.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        user_id = message.from_user.id
        users[user_id]['age'] = age
        await state.set_state(UserProfile.activity)
        await message.answer('–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')


@user_router.message(UserProfile.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        user_id = message.from_user.id
        users[user_id]['activity'] = activity
        await state.set_state(UserProfile.city)
        await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')


@user_router.message(UserProfile.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    user_id = message.from_user.id

    try:
        temperature = get_city_temperature(city, os.getenv('OPEN_WEATHER_TOKEN'))
        users[user_id]['city'] = city
        users[user_id]['water_goal'] = calculate_water_norm(
            users[user_id]['weight'], users[user_id]['activity'], temperature
        )
        users[user_id]['calorie_goal'] = calculate_calorie_norm(
            users[user_id]['weight'], users[user_id]['height'], users[user_id]['age']
        )

        await message.answer(
            f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {users[user_id]['water_goal']} –º–ª.\n'
            f'–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {users[user_id]['calorie_goal']} –∫–∫–∞–ª.\n'
            f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /log_water, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é /log_workout, '
            f'–∏ –µ–¥—É ‚Äî —Å –ø–æ–º–æ—â—å—é /log_food.'
        )
        await state.clear()
    except Exception as e:
        await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –û—à–∏–±–∫–∞: {str(e)}')


@user_router.message(Command('log_water'))
async def log_water_command(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not user_data["water_goal"]:
        await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.')
        return

    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö. –ü—Ä–∏–º–µ—Ä: /log_water 250')
            return

        water = int(args[1])
        user_data["logged_water"] += water
        remaining = max(0, user_data["water_goal"] - user_data["logged_water"])

        await message.answer(
            f'–í—ã –≤—ã–ø–∏–ª–∏: {user_data["logged_water"]} –º–ª –≤–æ–¥—ã.\n'
            f'–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.'
        )
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: /log_water 250')


@user_router.message(Command('log_food'))
async def log_food_command(message: Message, state: FSMContext):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω')
        return

    product_name = args[1]

    try:
        food_data = get_food_data(product_name)
    except Exception as e:
        await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ {product_name}. –û—à–∏–±–∫–∞: {str(e)}')
        return

    if not food_data or not food_data.get('calories_per_100g'):
        await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ \'{product_name}\'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')
        return

    await state.update_data(current_food={
        'product_name': food_data['product_name'],
        'calories_per_100g': food_data['calories_per_100g']
    })
    await state.set_state(UserProfile.target)

    await message.answer(
        f'üçé {food_data["product_name"]} —Å–æ–¥–µ—Ä–∂–∏—Ç {food_data["calories_per_100g"]} –∫–∫–∞–ª –Ω–∞ 100 –≥. '
        f'–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?'
    )


@user_router.message(UserProfile.target)
async def process_food_grams(message: Message, state: FSMContext):
    try:
        grams = float(message.text)
        user_id = message.from_user.id
        user_data = get_user_data(user_id)

        data = await state.get_data()
        current_food = data.get('current_food')

        if not current_food:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /log_food.')
            return

        calories_per_100g = current_food['calories_per_100g']
        product_name = current_food['product_name']
        total_calories = (calories_per_100g / 100) * grams

        user_data["logged_calories"] += total_calories

        await state.clear()
        await message.answer(
            f'–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª ({grams} –≥ {product_name}).\n'
            f'–°—É–º–º–∞—Ä–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {user_data["logged_calories"]:.1f} –∫–∫–∞–ª.'
        )
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')


@user_router.message(Command("log_workout"))
async def log_workout_command(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30')
        return

    workout_type = args[1].lower()
    try:
        duration = int(args[2])
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30')
        return

    if workout_type not in WORKOUTS:
        await message.answer(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {workout_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {", ".join(WORKOUTS.keys())}')
        return

    calories_burned = WORKOUTS[workout_type] * duration
    additional_water = (duration // 30) * 200

    user_data["burned_calories"] += calories_burned
    user_data["logged_water"] += additional_water

    await message.answer(
        f'üèãÔ∏è‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {duration} –º–∏–Ω—É—Ç ‚Äî {calories_burned} –∫–∫–∞–ª.\n'
        f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {additional_water} –º–ª –≤–æ–¥—ã.\n'
        f'–°—É–º–º–∞—Ä–Ω–æ —Å–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {user_data["burned_calories"]} –∫–∫–∞–ª.'
    )


@user_router.message(Command('check_progress'))
async def check_progress_command(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data["water_goal"] or not user_data["calorie_goal"]:
        await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.')
        return

    remaining_water = max(0, user_data["water_goal"] - user_data["logged_water"])
    calorie_balance = max(0, user_data["calorie_goal"] - (user_data["logged_calories"] - user_data["burned_calories"]))

    progress_message = (
        f'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n'
        f'üíß –í–æ–¥–∞:\n'
        f'- –í—ã–ø–∏—Ç–æ: {user_data["logged_water"]} –º–ª –∏–∑ {user_data["water_goal"]} –º–ª.\n'
        f'- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n\n'
        f'üî• –ö–∞–ª–æ—Ä–∏–∏:\n'
        f'- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data["logged_calories"]:.1f} –∫–∫–∞–ª –∏–∑ {user_data["calorie_goal"]:.1f} –∫–∫–∞–ª.\n'
        f'- –°–æ–∂–∂–µ–Ω–æ: {user_data["burned_calories"]:.1f} –∫–∫–∞–ª.\n'
        f'- –ë–∞–ª–∞–Ω—Å: {calorie_balance:.1f} –∫–∫–∞–ª.'
    )

    await message.answer(progress_message)


@user_router.message(Command('progress_chart'))
async def send_progress_chart(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data['water_goal'] or not user_data['calorie_goal']:
        await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.')
        return

    file_path = await generate_progress_chart(user_data)
    await message.answer_photo(FSInputFile(file_path), caption='–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º üìä')


low_calorie_foods = [
    {"name": "–û–≥—É—Ä–µ—Ü", "calories": 15},
    {"name": "–ö–∞–ø—É—Å—Ç–∞", "calories": 25},
    {"name": "–°–µ–ª—å–¥–µ—Ä–µ–π", "calories": 16},
    {"name": "–®–ø–∏–Ω–∞—Ç", "calories": 23},
    {"name": "–†–µ–¥–∏—Å", "calories": 20},
]


@user_router.message(Command('recommendations'))
async def send_recommendations(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data['calorie_goal']:
        await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.')
        return

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    food_recommendations = '\n'.join([f"{food['name']} ‚Äî {food['calories']} –∫–∫–∞–ª/100–≥" for food in low_calorie_foods])

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
    calorie_deficit = max(0, user_data['calorie_goal'] - (user_data['logged_calories'] - user_data['burned_calories']))
    recommended_workouts = []
    for workout, calories_per_minute in WORKOUTS.items():
        duration = int(calorie_deficit / calories_per_minute)
        if duration > 0:
            recommended_workouts.append(f"{workout.capitalize()} ‚Äî {duration} –º–∏–Ω")

    workout_recommendations = "\n".join(recommended_workouts)

    response = (
        f'üîπ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:\n{food_recommendations}\n\n'
        f'üîπ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º:\n{workout_recommendations if recommended_workouts else '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Ü–µ–ª–∏!'}'
    )

    await message.answer(response)
